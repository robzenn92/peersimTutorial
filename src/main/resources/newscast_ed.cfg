# PEERSIM EPTO with NEWSCAST

# network size
SIZE 3

# parameters of periodic execution
CYCLES 100
CYCLE SIZE*10000

# parameters of message transfer
# delay values here are relative to cycle length, in percentage,
# eg 50 means half the cycle length, 200 twice the cycle length, etc.
MINDELAY 0
MAXDELAY 0

# DROP is the probability that a message sent through the transport is lost
DROP 0

# PROB_EVENT is the probability each Application protocol has to generate and broadcast an event
PROB_EVENT 0.8

random.seed 1234567890
network.size SIZE

#simulation.cycles CYCLES
#control.shf Shuffle

simulation.experiments 1
simulation.endtime CYCLE*CYCLES
simulation.logtime 1

# The Application's protocol implements also CDProtocol to generate and broadcast an event with probability PROB_EVENT

protocol.app epto.EpTOApplication
protocol.app.prob PROB_EVENT
protocol.app.step CYCLE

# The EpTOOrdering's protocol does not need anything

protocol.prot_2 epto.EpTOOrdering

# The EpTODissemination's protocol implements also CDProtocol in order to disseminate nextBall every CYCLE units

protocol.prot_1 epto.EpTODissemination
protocol.prot_1.linkable prot_0
protocol.prot_1.fanout 2
protocol.prot_1.transport tr
protocol.prot_1.step CYCLE

# The EpTODissemination's protocol implements CDProtocol
# the delta parameter specifies how often the view is updated

protocol.prot_0 newscast.NewscastProtocol
protocol.prot_0.cache 2
protocol.prot_0.delta 2
protocol.prot_0.step CYCLE

protocol.urt UniformRandomTransport
protocol.urt.mindelay MINDELAY
protocol.urt.maxdelay MAXDELAY

protocol.tr UnreliableTransport
protocol.tr.transport urt
protocol.tr.drop DROP

init.sch_0 CDScheduler
init.sch_0.protocol app

init.sch_1 CDScheduler
init.sch_1.protocol prot_0

init.sch_2 CDScheduler
init.sch_2.protocol prot_1

init.rnd WireKOut
init.rnd.protocol prot_0
init.rnd.k 2